Pivotal RabbitMQ Server for Generic Unix or Linux
-------------------------------------------------

Install the Server
------------------

Install a recent version of Erlang.

Contained in the pivotal-rabbitmq-server-3.6.5.tar.xz is a directory
named pivotal-rabbitmq_server-3.6.5. You should extract this into
somewhere appropriate for application binaries on your system. The
sbin directory, which contains the commands you will use to operate
the RabbitMQ server, will be found in this directory.

Run RabbitMQ Server
-------------------

Start the Server
----------------

Invoke the sbin/rabbitmq-server shell script. This displays a short
banner message, concluding with the message "completed with [n]
plugins.", indicating that the RabbitMQ broker has been started
successfully.

You can also start the server in "detached" mode with rabbitmq-server
-detached, in which case the server process runs in the background.

Configure the Server
--------------------

You can customise the RabbitMQ environment
(https://www.rabbitmq.com/configure.html#customise-general-unix-environment)
by setting environment variables in
$RABBITMQ_HOME/etc/rabbitmq/rabbitmq-env.conf. Server components may
be configured, too, in the RabbitMQ configurationn file
(https://www.rabbitmq.com/configure.html#configuration-file) located at
$RABBITMQ_HOME/etc/rabbitmq/rabbitmq.config. Neither of these files
exist after installation.

File Locations
--------------

The Generic Unix tarball is designed as far as possible to run without
requiring configuration changes or special permissions. The
directories and files used by default are all held under the
installation directory rabbitmq_server-3.6.5 which is in the
$RABBITMQ_HOME variable in the scripts.

Should you wish to install RabbitMQ Server such that it uses the
conventional system directories for configuration, database, log
files, plugins etc, it is possible to do this.

Find the line:

SYS_PREFIX=${RABBITMQ_HOME}

in the sbin/rabbitmq-defaults script and change this line to:

SYS_PREFIX=

but do not modify any other line in this script.

Note: After this modification the default directory locations may
require different permissions. In particular RABBITMQ_MNESIA_BASE and
RABBITMQ_LOG_BASE may need to be created (the server will attempt to
create them at startup), and the RABBITMQ_ENABLED_PLUGINS_FILE will
need to be writable (for rabbitmq-plugins). The configuration files
will be looked for in /etc/rabbitmq/.

Port Access
-----------

SELinux and similar mechanisms may prevent RabbitMQ from binding to a
port. When that happens, RabbitMQ will fail to start. Make sure the
following ports can be opened:

4369 (epmd), 25672 (Erlang distribution)
5672, 5671 (AMQP 0-9-1 without and with TLS)
15672 (if management plugin is enabled)
61613, 61614 (if STOMP is enabled)
1883, 8883 (if MQTT is enabled)

It is possible to configure RabbitMQ (https://www.rabbitmq.com/configure.html)
to use different ports.

Default user access
-------------------

The broker creates a user guest with password guest. Unconfigured
clients will in general use these credentials. By default, these
credentials can only be used when connecting to the broker as
localhost so you will need to take action before connecting fromn any
other machine.

See the documentation on access control
(https://www.rabbitmq.com/access-control.html) for information on how to
create more users, delete the guest user, or allow remote access to
the guest user.

Managing the Broker
-------------------

To stop the server or check its status, etc., you can invoke
sbin/rabbitmqctl (as the user running rabbitmq-server). All
rabbitmqctl commands will report the node absence if no broker is
running.

Invoke rabbitmqctl stop to stop the server.

Invoke rabbitmqctl status to check whether it is running.

More info on rabbitmqctl (https://www.rabbitmq.com/man/rabbitmqctl.1.man.html).

Controlling System Limits
-------------------------

RabbitMQ installations running production workloads may need system
limits and kernel parameters tuning in order to handle a decent number
of concurrent connections and queues. The main setting that needs
adjustment is the max number of open files, also known as ulimit
-n. The default value on many operating systems is too low for a
messaging broker (eg. 1024 on several Linux distributions). We
recommend allowing for at least 65536 file descriptors for user
rabbitmq in production environments. 4096 should be sufficient for
most development workloads.

There are two limits in play: the maximum number of open files the OS
kernel allows (fs.file-max on Linux, kern.maxfilesperproc on OS X and
FreeBSD) and the per-user limit (ulimit -n). The former must be higher
than the latter.

For more information about controlling the system-wide limit, please
refer to the excellent Riak guide on open file limit tuning
(http://docs.basho.com/riak/latest/ops/tuning/open-files-limit/).

Verifying the Limit
-------------------

RabbitMQ management UI (https://www.rabbitmq.com/management.html)
displays the number of file descriptors available for it to use on the
Overview tab.

rabbitmqctl status

includes the same value.

The following command

ulimit -a

can be used to display effective limits for the current user. There
may be more convenient OS-specific ways of doing that for a running
process, such as the /proc filesystem on Linux.

Configuration Management Tools
------------------------------

Configuration management tools (e.g. Chef, Puppet, BOSH) provide
assistance with system limit tuning. Our developer tools
(https://www.rabbitmq.com/devtools.html#devops-tools) guide lists
relevant modules and projects.

